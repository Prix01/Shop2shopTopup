<?php

declare(strict_types=1);

/*
 * PrixAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PrixAPILib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use PrixAPILib\Exceptions\ApiException;
use PrixAPILib\Models\RetrieveTransactionDetailsResponse;

class APIController extends BaseController
{
    /**
     * Retrieves transaction details for the specified external ID.
     *
     * @param string $externalID The external ID associated with the transaction
     *
     * @return RetrieveTransactionDetailsResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function retrieveTransactionDetails(string $externalID): RetrieveTransactionDetailsResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/shop2shopTopups/{externalID}')
            ->parameters(TemplateParam::init('externalID', $externalID));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(400, ErrorType::init('Invalid request'))
            ->type(RetrieveTransactionDetailsResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Creates a new transaction with the specified details
     *
     * @param string $externalID The external ID associated with the transaction
     * @param string $reference The reference for the transaction
     * @param string $prixAccount The Prix account associated with the transaction
     * @param float $amount The amount of the transaction
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createANewTransaction(
        string $externalID,
        string $reference,
        string $prixAccount,
        float $amount
    ): void {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/shop2shopTopups/{externalID}')
            ->parameters(
                TemplateParam::init('externalID', $externalID),
                QueryParam::init('reference', $reference),
                QueryParam::init('prixAccount', $prixAccount),
                QueryParam::init('amount', $amount)
            );

        $_resHandler = $this->responseHandler()->throwErrorOn(400, ErrorType::init('Invalid request'));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
